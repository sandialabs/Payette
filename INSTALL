Building and installing Payette
+++++++++++++++++++++++++++++++

INTRODUCTION
============
Payette is an object oriented material driver. The majority of the source code is
written in Python and requires no additional building. Many of the material
models, however, are written in Fortran and require a seperate compile step.

PREREQUISITES
=============
Payette requires the following software installed for your platform:

0) Python__ 2.6.x or newer
   __ http://www.python.org

1) NumPy__ 1.4.1 or newer
   __ http://www.numpy.org/

2) SciPy__ 0.1 or newer
   __ http://www.scipy.org/

Each can be installed from source, or from a package manager. *** BUT *** we have
had varying degrees of success using software installed by package managers on
various linux distributions. On the Mac, we have had great success using software
installed by MacPorts (__ http://www.macports.org).  The alternatives are to:

   a) build each from source
      an involved, but fairly straight forward process

   b) use Python, NumPy, and SciPy installed with Sage__ 4.7 or newer
      __ http://www.sagemath.org/

      This option is perhaps the easiest, but has some limitations:

         *) some features are disabled when using Sage, in particular,
      	    callback functions from Fortran to Python routines.

	**) Using Sage is not as extensively tested as using a seperate
            Python installation.

LAYOUT
======
$PAYETTE_ROOT
| -- configure.py
| -- __init__.py
| -- INSTALL
| -- Aux/
| -- Documents/
| -- Source/
| -- Tests/
| -- Toolset/

INSTALLATION
============
1) First make sure that all Payette prerequisites are installed and working
   properly.

2) Add $PAYETTE_ROOT to your PYTHONPATH environment variable

3) Add $PAYETTE_ROOT/Toolset to your PATH environment variable

4) Change to $PAYETTE_ROOT and run

        % $PYTHON configure.py

   where $PYTHON is the python interpreter that has NumPy and SciPy installed. If
   using Sage, replace $PYTHON with sage -python instead.

   configure.py will write the Payette configuration file and the following
   executable scripts

   $PAYETTE_ROOT
   |-- Payette_config.py
   | -- Toolset/
        |-- buildPayette
        |-- cleanPayette
        |-- runPayette
        |-- testPayette

5) execute

	% buildPayette

   which will build the Payette material libraries and create a configuration
   file of all built and installed materials in
   $PAYETTE_ROOT/Source/Materials/Payette_installed_materials.py

TESTING
=======
To test Payette after installation, execute

	% testPayette -k regression -k fast

which will run the "fast" "regression" tests. To run the full test suite execute

	% testPayette -j4

Please note that running all of the tests takes several minutes.

KNOWN ISSUES
============
0) callbacks
   A callback function is a Python function accessible by Fortran subroutines
   through a callback mechanism provided by f2py. The NumPy and SciPy packages
   distributed by many of the different linux distributions package managers have
   broken dependencies. In particular, callback functions seem to be broken on
   many linux systems. The easy work around is to configure Payette with
   --no-callback. Another work around is passing different fortran compilers to
   configure.py (--f77exec= , --f90exec= ) and seeing if that makes a difference.

1) segfault
   A segfault error is usually a result of a broken callback.  See 0) above.

2) Unable to build
   Difficulty building Payette is usually the result of broken NumPy and SciPy
   installations and the workaround involves reinstalling all software packages
   from sourc. If you are uncomfortable installing these software packages from
   source, consider using Sage to build and run Payette.

TROUBLESHOOTING
===============
If you experience problems when building/installing/testing Payette, you can ask
help from Tim Fuller (tjfulle@sandia.gov) or Scot Swan (mswan@sandia.gov). Please
include the following information in your message:

0) Are you using Sage, or not

1) Platform information

        % $PYTHON -c 'import os,sys;print os.name,sys.platform'
	% uname -a

   OS, its distribution name and version information etc.

2) Information about C,C++,Fortran compilers/linkers as reported by
   the compilers when requesting their version information, e.g.,
   the output of

        % gcc -v
        % gfortran --version

3) Python version

        % $PYTHON -c 'import sys;print sys.version'

4) NumPy version

        % $PYTHON -c 'import numpy;print numpy.__version__'

5) SciPy version

        % $PYTHON -c 'import scipy;print scipy.__version__'

6) The $PAYETTE_ROOT/Payette_config.py file

7) Feel free to add any other relevant information.

