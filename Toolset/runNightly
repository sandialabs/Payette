#!/usr/bin/env python

import os, subprocess, sys, datetime, shutil, time, optparse
import multiprocessing as mp

def main(argv):
    # Option parsing
    usage = "usage: runNightly <-Xpython> <-Sscratch> <-Ggit> [options]"
    parser = optparse.OptionParser(usage=usage, version="runNightly 1.0")
    parser.add_option(
        "-S", "--scratch-dir",
        dest="SCRATCH",
        action="store",
        default=None,
        help=("REQUIRED path to scratch directory to run tests "
              "[default: %default]"))
    parser.add_option(
        "-X", "--python-int",
        dest="EXES",
        action="append",
        default=[],
        help=("REQUIRED path to python interpreter used to run tests "
              "(accumulated) [default: %default]"))
    parser.add_option(
        "-G", "--git-exe",
        dest="GIT",
        action="store",
        default=None,
        help="REQUIRED path to git executable [default: %default]")
    parser.add_option(
        "-e",
        dest="EMAIL",
        action="append",
        default=[],
        help="OPTIONAL additional email addresses [default: %default]")
    parser.add_option(
        "-B", "--with-kayenta",
        dest="KAYENTA",
        action="store_true",
        default=False,
        help="OPTIONAL test the kayenta model [default: %default]")
    parser.add_option(
        "-k", "--keyword",
        dest="KW",
        action="append",
        default=[],
        help="OPTIONAL additional keywords [default: %default]")
    (opts, args) = parser.parse_args(argv)

    # return codes
    retcodes = {-1: "DIFF/FAIL", 0: "PASS", 1: "DIFF",
                 2: "FAIL", 3: "FAIL"} # TO RUN"

    def failed(fail=[0], inquire=False):
        if inquire:
            return fail[0]
        fail[0] += 1
        return

    def diffed(diff=[0], inquire=False):
        if inquire:
            return diff[0]
        diff[0] += 1
        return

    def error_count(errors=[0], inquire=False):
        if inquire:
            return errors[0]
        errors[0] += 1
        return

    def error(message):
        error_count()
        print "ERROR: {0}".format(message)
        return

    def finish(retval):
        retcode = retcodes.get(retval)

        # mail the log file
        subj = '"[Payette Nightly: {0} - {1}]"'.format(ostype, retcode)
        rec = "tjfulle@sandia.gov"
        cc = "" if not opts.EMAIL else "-c {0}".format(",".join(opts.EMAIL))
        cmd = "cat {0} | mail -s {1} {2} {3}".format(log, subj, cc, rec)
        subprocess.call(cmd, shell=True, stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT)
        sys.exit(retval)

    t0 = time.time()

    # check required options
    # python interpreter
    if not opts.EXES:
        error("python interpreter[s] must be specified")
    else:
        for exe in opts.EXES:
            if not os.path.isfile(exe):
                error("python interpreter {0} not found".format(exe))

    # scratch space
    if not opts.SCRATCH:
        error("scratch directory must be specified")
    else:
        if not os.path.isdir(opts.SCRATCH):
            error("scratch directory {0} not found".format(opts.SCRATCH))
        elif not os.access(opts.SCRATCH, os.W_OK|os.X_OK):
            error("unable to write to {0}".format(opts.SCRATCH))

    # scratch space
    if not opts.GIT:
        error("path to git must be specified")
    else:
        if not os.path.isfile(opts.GIT):
            error("git executable {0} not found".format(opts.GIT))

    # check for previous errors
    if error_count(inquire=True):
        parser.print_help()
        parser.error("Resolve previous errors")

    # local variables
    ostype = sys.platform
    now = datetime.datetime.now()
    date = "{0:04d}.{1:02d}.{2:02d}".format(now.year, now.month, now.day)

    # directory to run tonights tests
    nightly = os.path.join(opts.SCRATCH, "Payette_Nightly/{0}".format(date))

    # remove old stuff, create new
    if os.path.isdir(nightly):
        shutil.rmtree(nightly)
    os.makedirs(nightly, 0750)
    pdir = os.path.join(nightly, "Payette")

    # log file
    log = os.path.join(nightly, "payette_testing.log")

    # number of processes that can be run
    nproc = "-j{0}".format(mp.cpu_count() - 2)

    # git repositories
    sandiagit = "software.sandia.gov:/space/sandiagit/"
    git_repos = [(sandiagit + "Payette", nightly)]

    # set up environment
    os.environ["PAYETTE_ROOT"] = pdir
    os.environ["PYTHONPATH"] = pdir
    os.environ["PATH"] = (
        "/usr/local/bin:/usr/bin:/bin:/opt/local/bin:/opt/local/sbin:"
        "/sbin:/usr/sbin:{0}".format(os.path.join(pdir, "Toolset")))
    try: os.environ.pop("PAYETTE_MTLDIR")
    except KeyError: pass
    try: os.environ.pop("PAYETTE_BENCHDIR")
    except KeyError: pass

    # kayenta specific stuff
    if opts.KAYENTA:

        kmm = os.path.join(nightly, "Kayenta")
        kmm_code = os.path.join(kmm, "code")
        kmm_bench = os.path.join(kmm, "benchmarks_payette")
        os.makedirs(kmm, 0750)

        git_repos.extend(
            [(sandiagit + x, kmm) for x in
             ["kayenta/code", "kayenta/benchmarks_payette"]])


        # set up environment
        os.environ["PAYETTE_MTLDIR"] = os.path.join(kmm_code, "aux/payette-utils")
        os.environ["PAYETTE_BENCHDIR"] = os.path.join(kmm_bench)

    # formatting
    width = 90
    align = "^"  # center alignment

    # open log file
    with open(log, "w") as fobj:
        write(fobj, "#", "#", align, width)
        write(fobj, "Payette Nightly Testing", " ", align, width)
        fobj.write("Date: {0}\n".format(now.strftime("%A %B %d, %Y")))
        fobj.write("Time: {0}\n".format(now.strftime("%H:%M:%S")))
        fobj.write("Platform: {0}\n".format(ostype))
        write(fobj, "#", "#", align, width)

        # clone git repositories
        for git_repo, base_dir in git_repos:
            if not os.path.isdir(base_dir):
                os.makedirs(base_dir, 0750)

            os.chdir(base_dir)
            fobj.write("\n\n")
            text = "Cloning from {0}".format(git_repo)
            write(fobj, text, "*", align, width)
            fobj.flush()
            retval = subprocess.call(
                "{0} clone {1}".format(opts.GIT, git_repo),
                shell=True, stdout=fobj, stderr=subprocess.STDOUT)
            fobj.flush()
            if retval != 0:
                fobj.write("ERROR: failed to clone {0}\n".format(git_repo))
                finish(2)
                shutil.move(os.path.basename(git_repo), base_dir)

        # Build and run with python
        for exe in opts.EXES:

            # configure
            os.chdir(pdir)
            fobj.write("\n\n")
            text = "Configuring Payette with {0}".format(exe)
            write(fobj, text, "*", align, width)
            fobj.flush()
            retval = subprocess.call("{0} configure.py".format(exe),
                                     shell=True,
                                     stdout=fobj, stderr=subprocess.STDOUT)
            if retval != 0:
                fobj.write("ERROR: Failed to configure with {0}".format(exe))
                error_count()
                continue

            fobj.flush()

            # build
            fobj.write("\n\n")
            text = "Building Payette with {0}".format(exe)
            write(fobj, text, "*", align, width)
            fobj.flush()
            bp = os.path.join(pdir, "Toolset/buildPayette")
            retval = subprocess.call("{0} {1}".format(bp, nproc),
                                     shell=True,
                                     stdout=fobj, stderr=subprocess.STDOUT)

            if retval != 0:
                fobj.write("ERROR: Failed to build with {0}".format(exe))
                error_count()
                continue

            fobj.flush()

            # run the tests
            fobj.write("\n\n")
            text = "Testing Payette with {0}".format(exe)
            write(fobj, text, "*", align, width)
            tp = os.path.join(pdir, "Toolset/testPayette")
            td = os.path.join(
                nightly,
                "TestResults.{0}_{1}".format(ostype, os.path.basename(exe)))
            kws = " ".join(["-k{0}".format(x) for x in opts.KW])
            topts = "-F -D{0}".format(td) + " " + kws
            fobj.write("testPayette options: {0}\n".format(topts))
            fobj.flush()
            retval = subprocess.call(
                "{0} {1} {2}".format(tp, nproc, topts),
                shell=True, stdout=fobj, stderr=subprocess.STDOUT)

            if retval < 0:
                diffed()
                failed()
            elif retval == 1:
                diffed()
            elif retval == 2:
                failed()
            elif retval == 3:
                failed()

            retcode = retcodes.get(retval, "FAIL")
            fobj.write(
                "Testing completed with return code: {0}\n".format(retcode))
            fobj.flush()

            # clean
            fobj.write("\n\n")
            text = "Cleaning Payette"
            write(fobj, text, "*", align, width)
            fobj.flush()
            cp = os.path.join(pdir, "Toolset/cleanPayette")
            subprocess.call("{0}".format(cp),
                            shell=True, stdout=fobj, stderr=subprocess.STDOUT)
            fobj.flush()

            continue

        tf = time.time()
        fobj.write("\n\n")
        write(fobj, "#", "#", align, width)
        text = "TESTING COMPLETED"
        write(fobj, text, " ", align, width)
        fobj.write("Total time: {0:.2f}\n".format(float(tf - t0)))
        write(fobj, "#", "#", align, width)
        fobj.flush()

        pass

    if error_count(inquire=True):
        finish(2)
    elif failed(inquire=True) and diffed(inquire=True):
        finish(-1)
    elif diffed(inquire=True):
        finish(1)
    elif failed(inquire=True):
        finish(2)
    else:
        finish(0)

    return

def write(fobj, text, fill, align, width):
    fobj.write("{0:{fill}{align}{width}}\n"
               .format(text, fill=fill, align=align, width=width))

if __name__ == "__main__":
    main(sys.argv[1:])


